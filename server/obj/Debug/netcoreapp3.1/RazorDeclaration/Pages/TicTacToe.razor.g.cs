// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace Projekt.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#line 1 "C:\Users\Admin\Desktop\Projekt\server\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#line 2 "C:\Users\Admin\Desktop\Projekt\server\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#line 3 "C:\Users\Admin\Desktop\Projekt\server\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#line 4 "C:\Users\Admin\Desktop\Projekt\server\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#line 5 "C:\Users\Admin\Desktop\Projekt\server\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#line 6 "C:\Users\Admin\Desktop\Projekt\server\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#line 7 "C:\Users\Admin\Desktop\Projekt\server\_Imports.razor"
using Projekt.Shared;

#line default
#line hidden
#line 11 "C:\Users\Admin\Desktop\Projekt\server\Pages\TicTacToe.razor"
using Radzen;

#line default
#line hidden
#line 12 "C:\Users\Admin\Desktop\Projekt\server\Pages\TicTacToe.razor"
using Radzen.Blazor;

#line default
#line hidden
#line 13 "C:\Users\Admin\Desktop\Projekt\server\Pages\TicTacToe.razor"
using Microsoft.AspNetCore.Identity;

#line default
#line hidden
#line 14 "C:\Users\Admin\Desktop\Projekt\server\Pages\TicTacToe.razor"
using Projekt.Models;

#line default
#line hidden
#line 15 "C:\Users\Admin\Desktop\Projekt\server\Pages\TicTacToe.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#line 16 "C:\Users\Admin\Desktop\Projekt\server\Pages\TicTacToe.razor"
using System.Threading;

#line default
#line hidden
#line 17 "C:\Users\Admin\Desktop\Projekt\server\Pages\TicTacToe.razor"
using Data;

#line default
#line hidden
#line 18 "C:\Users\Admin\Desktop\Projekt\server\Pages\TicTacToe.razor"
using Microsoft.AspNetCore.SignalR.Client;

#line default
#line hidden
#line 19 "C:\Users\Admin\Desktop\Projekt\server\Pages\TicTacToe.razor"
           [Authorize]

#line default
#line hidden
    [Microsoft.AspNetCore.Components.LayoutAttribute(typeof(MainLayout))]
    [Microsoft.AspNetCore.Components.RouteAttribute("/")]
    [Microsoft.AspNetCore.Components.RouteAttribute("/tic-tac-toe")]
    public partial class TicTacToe : Projekt.Pages.TicTacToeComponent
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#line 105 "C:\Users\Admin\Desktop\Projekt\server\Pages\TicTacToe.razor"
        
            private HubConnection _hubConnection;
            private GameModel _gamesettings;

            protected List<string> messages = new List<string>();

            protected override async Task OnInitializedAsync()
            {
                _gamesettings = await GameModelService.GetHumanGameBoardAsync();
                _hubConnection = new HubConnectionBuilder()
                    .WithUrl(NavigationManager.ToAbsoluteUri("/gameHub"))
                    .Build();

                _hubConnection.On<GameModel>(ClientEndpoints.ReceiveMessage, (gamesettings) =>
                {
                    _gamesettings = gamesettings;
                    StateHasChanged();
                });

                _hubConnection.On<GameModel>(ClientEndpoints.EndTurn, async (gamesettings) =>
                {
                    if (gamesettings.Botturn)
                    {
                        await this.Write($"Turn {gamesettings.TurnCount} - Human Turn Over");
                    }
                    else
                    {
                        await this.Write($"Turn {gamesettings.TurnCount} - Bot Turn Over.");

                    }

                    await this.Write(Newtonsoft.Json.JsonConvert.SerializeObject(gamesettings.Game, Newtonsoft.Json.Formatting.None));

                    if (!gamesettings.Gameover)
                    {
                        _gamesettings = gamesettings;
                        StateHasChanged();
                        if (_gamesettings.Botturn)
                        {

                            await DoBotTurn();
                        }
                    }
                });

                _hubConnection.On<GameModel>(ClientEndpoints.NewHumanGame, (gamesettings) =>
                {
                    _gamesettings = gamesettings;
                    StateHasChanged();
                });

                _hubConnection.On<GameModel>(ClientEndpoints.NewBotGame, async (gamesettings) =>
                {
                    this.messages.Clear();
                    await this.Write($"Starting New Bot Game");
                    _gamesettings = gamesettings;
                    StateHasChanged();
                });

                _hubConnection.On<GameModel>(ClientEndpoints.GameOver, async (gamesettings) =>
                {
                    await this.Write($"Turn {gamesettings.TurnCount} - Game Over.");
                    await this.Write(Newtonsoft.Json.JsonConvert.SerializeObject(gamesettings.Game, Newtonsoft.Json.Formatting.None));
                    _gamesettings = gamesettings;
                    StateHasChanged();
                });


                await _hubConnection.StartAsync();
            }

            private async Task Write(string message)
            {
                this.messages.Add(message);
                await this.JSRuntime.InvokeVoidAsync("console.log", message);
            }

            public bool IsConnected => _hubConnection.State == HubConnectionState.Connected;
            Task Send() => _hubConnection.SendAsync(ServerEndpoints.SendMessage, _gamesettings);
            Task DoBotTurn() => _hubConnection.SendAsync(ServerEndpoints.TakeBotTurn, _gamesettings);
            Task NewBotGameClick() => _hubConnection.SendAsync(ServerEndpoints.NewBotGame, _gamesettings);
            Task NewHumanGameClick() => _hubConnection.SendAsync(ServerEndpoints.NewHumanGame, _gamesettings);
            Task TakePlayerTurn(int i) => _hubConnection.SendAsync(ServerEndpoints.TakePlayerTurn, i, _gamesettings);


            public async Task GameClick(int i)
            {
                if (!_gamesettings.Gameover && !_gamesettings.Botturn && string.IsNullOrEmpty(_gamesettings.Game[i]))
                {
                    await TakePlayerTurn(i);
                }
            } 
    

#line default
#line hidden
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JSRuntime { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private GameHub GameHub { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private GameModelService GameModelService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager NavigationManager { get; set; }
    }
}
#pragma warning restore 1591
